/*
 * This file is generated by jOOQ.
 */
package com.wordpress.kkaravitis.pricing.jooq.tables;


import com.wordpress.kkaravitis.pricing.jooq.Indexes;
import com.wordpress.kkaravitis.pricing.jooq.Keys;
import com.wordpress.kkaravitis.pricing.jooq.Public;
import com.wordpress.kkaravitis.pricing.jooq.tables.records.CompetitorPriceRecord;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CompetitorPrice extends TableImpl<CompetitorPriceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.competitor_price</code>
     */
    public static final CompetitorPrice COMPETITOR_PRICE = new CompetitorPrice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompetitorPriceRecord> getRecordType() {
        return CompetitorPriceRecord.class;
    }

    /**
     * The column <code>public.competitor_price.id</code>.
     */
    public final TableField<CompetitorPriceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.competitor_price.product_id</code>.
     */
    public final TableField<CompetitorPriceRecord, String> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.competitor_price.product_name</code>.
     */
    public final TableField<CompetitorPriceRecord, String> PRODUCT_NAME = createField(DSL.name("product_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.competitor_price.competitor_price</code>.
     */
    public final TableField<CompetitorPriceRecord, BigDecimal> COMPETITOR_PRICE_ = createField(DSL.name("competitor_price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.competitor_price.updated_at</code>.
     */
    public final TableField<CompetitorPriceRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private CompetitorPrice(Name alias, Table<CompetitorPriceRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompetitorPrice(Name alias, Table<CompetitorPriceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.competitor_price</code> table reference
     */
    public CompetitorPrice(String alias) {
        this(DSL.name(alias), COMPETITOR_PRICE);
    }

    /**
     * Create an aliased <code>public.competitor_price</code> table reference
     */
    public CompetitorPrice(Name alias) {
        this(alias, COMPETITOR_PRICE);
    }

    /**
     * Create a <code>public.competitor_price</code> table reference
     */
    public CompetitorPrice() {
        this(DSL.name("competitor_price"), null);
    }

    public <O extends Record> CompetitorPrice(Table<O> child, ForeignKey<O, CompetitorPriceRecord> key) {
        super(child, key, COMPETITOR_PRICE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IX_COMPETITOR_PRICE_UPDATED);
    }

    @Override
    public Identity<CompetitorPriceRecord, Long> getIdentity() {
        return (Identity<CompetitorPriceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CompetitorPriceRecord> getPrimaryKey() {
        return Keys.COMPETITOR_PRICE_PKEY;
    }

    @Override
    public List<UniqueKey<CompetitorPriceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.COMPETITOR_PRICE_PRODUCT_ID_KEY);
    }

    @Override
    public CompetitorPrice as(String alias) {
        return new CompetitorPrice(DSL.name(alias), this);
    }

    @Override
    public CompetitorPrice as(Name alias) {
        return new CompetitorPrice(alias, this);
    }

    @Override
    public CompetitorPrice as(Table<?> alias) {
        return new CompetitorPrice(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompetitorPrice rename(String name) {
        return new CompetitorPrice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompetitorPrice rename(Name name) {
        return new CompetitorPrice(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompetitorPrice rename(Table<?> name) {
        return new CompetitorPrice(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, BigDecimal, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super String, ? super BigDecimal, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super String, ? super BigDecimal, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
