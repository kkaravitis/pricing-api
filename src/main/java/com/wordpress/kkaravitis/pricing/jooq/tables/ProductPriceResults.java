/*
 * This file is generated by jOOQ.
 */
package com.wordpress.kkaravitis.pricing.jooq.tables;


import com.wordpress.kkaravitis.pricing.jooq.Indexes;
import com.wordpress.kkaravitis.pricing.jooq.Keys;
import com.wordpress.kkaravitis.pricing.jooq.Public;
import com.wordpress.kkaravitis.pricing.jooq.tables.records.ProductPriceResultsRecord;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductPriceResults extends TableImpl<ProductPriceResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_price_results</code>
     */
    public static final ProductPriceResults PRODUCT_PRICE_RESULTS = new ProductPriceResults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductPriceResultsRecord> getRecordType() {
        return ProductPriceResultsRecord.class;
    }

    /**
     * The column <code>public.product_price_results.id</code>.
     */
    public final TableField<ProductPriceResultsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.product_price_results.product_id</code>.
     */
    public final TableField<ProductPriceResultsRecord, String> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.product_price_results.product_name</code>.
     */
    public final TableField<ProductPriceResultsRecord, String> PRODUCT_NAME = createField(DSL.name("product_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.product_price_results.price</code>.
     */
    public final TableField<ProductPriceResultsRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(12, 2).nullable(false), this, "");

    /**
     * The column <code>public.product_price_results.currency</code>.
     */
    public final TableField<ProductPriceResultsRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(3).defaultValue(DSL.field(DSL.raw("'EUR'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.product_price_results.timestamp</code>.
     */
    public final TableField<ProductPriceResultsRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.product_price_results.demand_metric</code>.
     */
    public final TableField<ProductPriceResultsRecord, Double> DEMAND_METRIC = createField(DSL.name("demand_metric"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.product_price_results.competitor_price</code>.
     */
    public final TableField<ProductPriceResultsRecord, Double> COMPETITOR_PRICE = createField(DSL.name("competitor_price"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.product_price_results.inventory_level</code>.
     */
    public final TableField<ProductPriceResultsRecord, Double> INVENTORY_LEVEL = createField(DSL.name("inventory_level"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.product_price_results.model_prediction</code>.
     */
    public final TableField<ProductPriceResultsRecord, BigDecimal> MODEL_PREDICTION = createField(DSL.name("model_prediction"), SQLDataType.NUMERIC(12, 2), this, "");

    private ProductPriceResults(Name alias, Table<ProductPriceResultsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductPriceResults(Name alias, Table<ProductPriceResultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.product_price_results</code> table
     * reference
     */
    public ProductPriceResults(String alias) {
        this(DSL.name(alias), PRODUCT_PRICE_RESULTS);
    }

    /**
     * Create an aliased <code>public.product_price_results</code> table
     * reference
     */
    public ProductPriceResults(Name alias) {
        this(alias, PRODUCT_PRICE_RESULTS);
    }

    /**
     * Create a <code>public.product_price_results</code> table reference
     */
    public ProductPriceResults() {
        this(DSL.name("product_price_results"), null);
    }

    public <O extends Record> ProductPriceResults(Table<O> child, ForeignKey<O, ProductPriceResultsRecord> key) {
        super(child, key, PRODUCT_PRICE_RESULTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PRODUCT_TIME);
    }

    @Override
    public Identity<ProductPriceResultsRecord, Long> getIdentity() {
        return (Identity<ProductPriceResultsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductPriceResultsRecord> getPrimaryKey() {
        return Keys.PRODUCT_PRICE_RESULTS_PKEY;
    }

    @Override
    public List<UniqueKey<ProductPriceResultsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_PRODUCT_TIME);
    }

    @Override
    public ProductPriceResults as(String alias) {
        return new ProductPriceResults(DSL.name(alias), this);
    }

    @Override
    public ProductPriceResults as(Name alias) {
        return new ProductPriceResults(alias, this);
    }

    @Override
    public ProductPriceResults as(Table<?> alias) {
        return new ProductPriceResults(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductPriceResults rename(String name) {
        return new ProductPriceResults(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductPriceResults rename(Name name) {
        return new ProductPriceResults(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductPriceResults rename(Table<?> name) {
        return new ProductPriceResults(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, BigDecimal, String, LocalDateTime, Double, Double, Double, Double> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super Double, ? super Double, ? super Double, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super Double, ? super Double, ? super Double, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
